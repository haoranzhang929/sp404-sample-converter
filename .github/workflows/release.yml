name: Build and Release Electron App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-linux:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Build CSS
        run: npm run build:css

      - name: Build Electron app for Linux
        run: npm run dist -- --linux

      - name: List files in dist directory (Linux)
        run: ls -alh ./dist

      - name: Upload Release Assets
        uses: actions/upload-artifact@v3
        with:
          name: electron-app-linux
          path: dist/**

  build-windows:
    runs-on: windows-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Build CSS
        run: npm run build:css

      - name: Build Electron app for Windows
        run: npm run dist -- --win

      - name: List files in dist directory (Windows)
        run: dir dist

      - name: Upload Release Assets
        uses: actions/upload-artifact@v3
        with:
          name: electron-app-windows
          path: dist/**

  build-macos:
    runs-on: macos-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Build CSS
        run: npm run build:css

      - name: Build Electron app for macOS
        run: npm run dist -- --mac

      - name: List files in dist directory (macOS)
        run: ls -alh ./dist

      - name: Upload Release Assets
        uses: actions/upload-artifact@v3
        with:
          name: electron-app-macos
          path: dist/**

  release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts (Linux)
        uses: actions/download-artifact@v3
        with:
          name: electron-app-linux
          path: dist

      - name: Download build artifacts (Windows)
        uses: actions/download-artifact@v3
        with:
          name: electron-app-windows
          path: dist

      - name: Download build artifacts (macOS)
        uses: actions/download-artifact@v3
        with:
          name: electron-app-macos
          path: dist

      - name: List files in dist directory
        run: ls -alh ./dist

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/sp404-sample-converter\ Setup\ 1.0.0.exe
          asset_name: sp404-sample-converter-${{ github.run_number }}.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/sp404-sample-converter-1.0.0-arm64.dmg
          asset_name: sp404-sample-converter-${{ github.run_number }}.dmg
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (Linux AppImage)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/sp404-sample-converter-1.0.0.AppImage
          asset_name: sp404-sample-converter-${{ github.run_number }}.AppImage
          asset_content_type: application/octet-stream
